// Code generated by MockGen. DO NOT EDIT.
// Source: paragraph_repo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/FrHorschig/kant-search-backend/database/model"
	gomock "github.com/golang/mock/gomock"
)

// MockParagraphRepo is a mock of ParagraphRepo interface.
type MockParagraphRepo struct {
	ctrl     *gomock.Controller
	recorder *MockParagraphRepoMockRecorder
}

// MockParagraphRepoMockRecorder is the mock recorder for MockParagraphRepo.
type MockParagraphRepoMockRecorder struct {
	mock *MockParagraphRepo
}

// NewMockParagraphRepo creates a new mock instance.
func NewMockParagraphRepo(ctrl *gomock.Controller) *MockParagraphRepo {
	mock := &MockParagraphRepo{ctrl: ctrl}
	mock.recorder = &MockParagraphRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParagraphRepo) EXPECT() *MockParagraphRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockParagraphRepo) Insert(ctx context.Context, paragraph model.Paragraph) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, paragraph)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockParagraphRepoMockRecorder) Insert(ctx, paragraph interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockParagraphRepo)(nil).Insert), ctx, paragraph)
}

// Select mocks base method.
func (m *MockParagraphRepo) Select(ctx context.Context, workId, paragraphId int32) (model.Paragraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, workId, paragraphId)
	ret0, _ := ret[0].(model.Paragraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockParagraphRepoMockRecorder) Select(ctx, workId, paragraphId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockParagraphRepo)(nil).Select), ctx, workId, paragraphId)
}

// SelectOfPages mocks base method.
func (m *MockParagraphRepo) SelectOfPages(ctx context.Context, workId, page_start, page_end int32) ([]model.Paragraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOfPages", ctx, workId, page_start, page_end)
	ret0, _ := ret[0].([]model.Paragraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOfPages indicates an expected call of SelectOfPages.
func (mr *MockParagraphRepoMockRecorder) SelectOfPages(ctx, workId, page_start, page_end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOfPages", reflect.TypeOf((*MockParagraphRepo)(nil).SelectOfPages), ctx, workId, page_start, page_end)
}
