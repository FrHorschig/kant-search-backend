// Code generated by MockGen. DO NOT EDIT.
// Source: volume_repo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/FrHorschig/kant-search-backend/database/model"
	gomock "github.com/golang/mock/gomock"
)

// MockVolumeRepo is a mock of VolumeRepo interface.
type MockVolumeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeRepoMockRecorder
}

// MockVolumeRepoMockRecorder is the mock recorder for MockVolumeRepo.
type MockVolumeRepoMockRecorder struct {
	mock *MockVolumeRepo
}

// NewMockVolumeRepo creates a new mock instance.
func NewMockVolumeRepo(ctrl *gomock.Controller) *MockVolumeRepo {
	mock := &MockVolumeRepo{ctrl: ctrl}
	mock.recorder = &MockVolumeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeRepo) EXPECT() *MockVolumeRepoMockRecorder {
	return m.recorder
}

// SelectAll mocks base method.
func (m *MockVolumeRepo) SelectAll(ctx context.Context) ([]model.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", ctx)
	ret0, _ := ret[0].([]model.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockVolumeRepoMockRecorder) SelectAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockVolumeRepo)(nil).SelectAll), ctx)
}
