// Code generated by MockGen. DO NOT EDIT.
// Source: work_repo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/FrHorschig/kant-search-backend/database/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkRepo is a mock of WorkRepo interface.
type MockWorkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWorkRepoMockRecorder
}

// MockWorkRepoMockRecorder is the mock recorder for MockWorkRepo.
type MockWorkRepoMockRecorder struct {
	mock *MockWorkRepo
}

// NewMockWorkRepo creates a new mock instance.
func NewMockWorkRepo(ctrl *gomock.Controller) *MockWorkRepo {
	mock := &MockWorkRepo{ctrl: ctrl}
	mock.recorder = &MockWorkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkRepo) EXPECT() *MockWorkRepoMockRecorder {
	return m.recorder
}

// SelectAll mocks base method.
func (m *MockWorkRepo) SelectAll(ctx context.Context) ([]model.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", ctx)
	ret0, _ := ret[0].([]model.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockWorkRepoMockRecorder) SelectAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockWorkRepo)(nil).SelectAll), ctx)
}

// UpdateText mocks base method.
func (m *MockWorkRepo) UpdateText(ctx context.Context, upload model.WorkUpload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", ctx, upload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockWorkRepoMockRecorder) UpdateText(ctx, upload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockWorkRepo)(nil).UpdateText), ctx, upload)
}
