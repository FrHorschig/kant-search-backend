// Code generated by MockGen. DO NOT EDIT.
// Source: search_repo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/FrHorschig/kant-search-backend/database/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSearchRepo is a mock of SearchRepo interface.
type MockSearchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepoMockRecorder
}

// MockSearchRepoMockRecorder is the mock recorder for MockSearchRepo.
type MockSearchRepoMockRecorder struct {
	mock *MockSearchRepo
}

// NewMockSearchRepo creates a new mock instance.
func NewMockSearchRepo(ctrl *gomock.Controller) *MockSearchRepo {
	mock := &MockSearchRepo{ctrl: ctrl}
	mock.recorder = &MockSearchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepo) EXPECT() *MockSearchRepoMockRecorder {
	return m.recorder
}

// SearchParagraphs mocks base method.
func (m *MockSearchRepo) SearchParagraphs(ctx context.Context, searchTerms model.SearchCriteria) ([]model.SearchMatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchParagraphs", ctx, searchTerms)
	ret0, _ := ret[0].([]model.SearchMatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchParagraphs indicates an expected call of SearchParagraphs.
func (mr *MockSearchRepoMockRecorder) SearchParagraphs(ctx, searchTerms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchParagraphs", reflect.TypeOf((*MockSearchRepo)(nil).SearchParagraphs), ctx, searchTerms)
}
